// tk_zbrush_testScript zbrush plugin
[ISubPalette, "ZPlugin:tk_zbrush_testScript"]


// Reload Script ctrl + Shift R
// button hotkeys ctrl+Shift A, ctrl + Shift B




/*+------------------------------------------------+
  | Buttons                                        |
  +------------------------------------------------+*/
// Button A
[IButton, "ZPlugin:tk_zbrush_testScript:Button A", "Test Button A", 
//
//______begin code_____________________________________________________________________


[VarSet, drawSize, INT([IGet, "Draw:Focal Shift"])]
[VarDec, drawSize]
[NoteBar, drawSize]
[ISet, "Draw:Focal Shift", drawSize]




//______end code_______________________________________________________________________
//
  , , 75
]


// Button B
[IButton, "ZPlugin:tk_zbrush_testScript:Button B", "Test Button B", 
//
//______begin code_____________________________________________________________________

[VarSet, drawSize, INT([IGet, "Draw:Focal Shift"])]
[VarInc, drawSize]
[NoteBar, drawSize]
[ISet, "Draw:Focal Shift", drawSize]




//______end code_______________________________________________________________________
//
  , , 75
]





/*+-------------------------------------------------+
  | Switches                                        |
  +-------------------------------------------------+*/
// Switch A
[ISwitch, "ZPlugin:tk_zbrush_testScript:Switch A", 0, "Test Switch A",
//must have a comma inserted in code area if no working code is currently in place
//______begin code_____________________________________________________________________



,



//______end code_______________________________________________________________________
//
  , 0, 75
]
[IEnable, "ZPlugin:tk_zbrush_testScript:Switch A"]


// Switch B
[ISwitch, "ZPlugin:tk_zbrush_testScript:Switch B", 0, "Test Switch B",
//must have a comma inserted in code area if no working code is currently in place
//______begin code_____________________________________________________________________



,



//______end code_______________________________________________________________________
//
  , 0, 75
]
[IEnable, "ZPlugin:tk_zbrush_testScript:Switch B"]





/*+-------------------------------------------------+
  | sliders                                         |
  +-------------------------------------------------+*/
// Slider A
[ISlider, "ZPlugin:tk_zbrush_testScript:Slider A", 0, 10, 0, 100, "Test Slider A", //initial value, increment, range
//
//______begin code_____________________________________________________________________






//______end code_______________________________________________________________________
//
  , , 75
]


// Slider B
[ISlider, "ZPlugin:tk_zbrush_testScript:Slider B", 0, 10, 0, 100, "Test Slider B", //initial value, increment, range
//
//______begin code_____________________________________________________________________







//______end code_______________________________________________________________________
//
  , , 75
]










//notes:
/*

naming x.buttonName allows for same button icon names to be displayed on different buttons by changing x 

[IShow, Interface item path, Show Zoom Rectangles?, Target parent
window?]


//function
[VarSet, Xpos, Tool:Geometry:X Position]
[IGet, Xpos]
[VarSet, negXpos, NEG(Xpos)]
[ISet, Tool:Geometry:X Position, negXpos]
[noteBar, negXpos]

[CODE]  //subtool list add/subtract modifiers
[VarDef,subToolPath,""]
[VarDef, message,""]

[IButton,"Test Mods","Test SubTool Modifiers",
[VarSet,subToolPath,[IGetTitle,Tool:ItemInfo]]
[VarSet,subToolPath,[StrMerge,"Tool:Sub Tool:",[StrExtract,subToolPath,0,[StrLength,subToolPath]-2]]]	
[VarSet,mod,[IModGet,[Var,subToolPath]]]
[If,((mod&1) == 1),[VarSet,message,"Add is on"]]
[If,((mod&2) == 2),[VarSet,message,"Subtract is on"]]
[If,((mod&4) == 4),[VarSet,message,"Intersection is on"]]
[If,((mod&8) == 8),[VarSet,message,[StrMerge,message," and Polypaint is on"]]]
[If,((mod&16) == 16),[VarSet,message,[StrMerge,message," and the SubTool is Visible"]]]
[Note, message]
][/CODE]

get origional button help info (ctrl)

auto set camera view IMM 

flatten /unflatten UV's switch

[CanvasClick, 10, 10, 20, 20]
Emulates a canvas click at 10, 10 with a drag to 20, 20 before releasing the mouse button

re-initialize left and right menus using startup defaultscript

***not working:  iget value of active and total points display in new field

IEnable IDisable buttons switches when they are not relevant

hotkey note button reads hotkey file and prints contents

script that periodically checks swtich state and updates custom switches

FileNameGetLastUsed MemSaveToFile fileExists fileExecute   load recent file

button to pull up a menu eg. [ZPLUGIN, 112] (plugin menu info taken from hotkey file)

*/